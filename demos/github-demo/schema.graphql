"""
The query root of GitHub's GraphQL interface.
"""
type Query {
  """
  Lookup a given repository by the owner and repository name.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    The name of the repository
    """
    name: String!

    """
    The login field of a user or organization
    """
    owner: String!
  ): Repository

  """
  Lookup a user by login.
  """
  user(
    """
    The user's login.
    """
    login: String!
  ): User

  """
  The currently authenticated user.
  """
  viewer: User!
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User {
  """
  A URL pointing to the user's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The user's public profile bio.
  """
  bio: String

  """
  The user's public profile bio as HTML.
  """
  bioHTML: HTML!

  """
  The user's public profile company.
  """
  company: String

  """
  The user's public profile company as HTML.
  """
  companyHTML: HTML!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The user's publicly visible profile email.
  """
  email: String!

  id: ID!

  """
  Whether or not this user is following the viewer. Inverse of viewerIsFollowing
  """
  isFollowingViewer: Boolean!

  """
  Whether or not this user is the viewing user.
  """
  isViewer: Boolean!

  """
  The user's public profile location.
  """
  location: String

  """
  The username used to login.
  """
  login: String!

  """
  The user's public profile name.
  """
  name: String

  """
  A list of repositories that the user owns.
  """
  repositories(
    # """
    # Array of viewer's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # current viewer owns.
    # """
    # affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int # """ # Ordering options for repositories returned from the connection # """ # orderBy: RepositoryOrder # """ # Array of owner's affiliation options for repositories returned from the # connection. For example, OWNER will include only repositories that the # organization or user being viewed owns. # """ # ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR] # """ # If non-null, filters repositories according to privacy # """ # privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  Find Repository.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  # """
  # Discussion comments this user has authored.
  # """
  # repositoryDiscussionComments(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int

  #   """
  #   Filter discussion comments to only those that were marked as the answer
  #   """
  #   onlyAnswers: Boolean = false

  #   """
  #   Filter discussion comments to only those in a specific repository.
  #   """
  #   repositoryId: ID
  # ): DiscussionCommentConnection!

  # """
  # Discussions this user has started.
  # """
  # repositoryDiscussions(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   Filter discussions to only those that have been answered or not. Defaults to
  #   including both answered and unanswered discussions.
  #   """
  #   answered: Boolean = null

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int

  #   """
  #   Ordering options for discussions returned from the connection.
  #   """
  #   orderBy: DiscussionOrder = { field: CREATED_AT, direction: DESC }

  #   """
  #   Filter discussions to only those in a specific repository.
  #   """
  #   repositoryId: ID

  #   """
  #   A list of states to filter the discussions by.
  #   """
  #   states: [DiscussionState!] = []
  # ): DiscussionConnection!

  """
  The HTTP path for this user
  """
  resourcePath: URI!

  """
  The user's social media accounts, ordered as they appear on the user's profile.
  """
  socialAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SocialAccountConnection!

  """
  Repositories the user has starred.
  """
  starredRepositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    # """
    # Order for connection
    # """
    # orderBy: StarOrder

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean
  ): StarredRepositoryConnection!

  """
  The user's description of what they're currently doing.
  """
  status: UserStatus

  """
  The user's Twitter username.
  """
  twitterUsername: String

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this user
  """
  url: URI!

  """
  A list of repositories the given user is watching.
  """
  watching(
    # """
    # Affiliation options for repositories returned from the connection. If none
    # specified, the results will include repositories for which the current
    # viewer is an owner or collaborator, or member.
    # """
    # affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int # """ # Ordering options for repositories returned from the connection # """ # orderBy: RepositoryOrder # """ # Array of owner's affiliation options for repositories returned from the # connection. For example, OWNER will include only repositories that the # organization or user being viewed owns. # """ # ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR] # """ # If non-null, filters repositories according to privacy # """ # privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  A URL pointing to the user's public website/blog.
  """
  websiteUrl: URI
}

"""
A repository contains the content for a project.
"""
type Repository {
  """
  Whether or not a pull request head branch that is behind its base branch can
  always be updated even if it is not required to be up to date before merging.
  """
  allowUpdateBranch: Boolean!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Ref associated with the repository's default branch.
  """
  defaultBranchRef: Ref

  """
  Whether or not branches are automatically deleted when merged in this repository.
  """
  deleteBranchOnMerge: Boolean!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  The number of kilobytes this repository occupies on disk.
  """
  diskUsage: Int

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Whether this repository allows forks.
  """
  forkingAllowed: Boolean!

  """
  A list of direct forked repositories.
  """
  forks(
    # """
    # Array of viewer's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # current viewer owns.
    # """
    # affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int # """ # Ordering options for repositories returned from the connection # """ # orderBy: RepositoryOrder # """ # Array of owner's affiliation options for repositories returned from the # connection. For example, OWNER will include only repositories that the # organization or user being viewed owns. # """ # ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR] # """ # If non-null, filters repositories according to privacy # """ # privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  The repository's URL.
  """
  homepageUrl: URI
  id: ID!

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Returns whether or not this repository disabled.
  """
  isDisabled: Boolean!

  """
  Returns whether or not this repository is empty.
  """
  isEmpty: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  isPrivate: Boolean!

  """
  Returns true if this repository has a security policy
  """
  isSecurityPolicyEnabled: Boolean

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  Is this repository a user configuration repository?
  """
  isUserConfigurationRepository: Boolean!

  """
  The name of the repository.
  """
  name: String!

  """
  The repository's name with owner.
  """
  nameWithOwner: String!

  """
  The User owner of the repository.
  """
  owner: RepositoryOwner!

  """
  The repository parent, if this is a fork.
  """
  parent: Repository

  """
  Returns a single pull request from the current repository by number.
  """
  pullRequest(
    """
    The number for the pull request to be returned.
    """
    number: Int!
  ): PullRequest

  """
  A list of pull requests that have been opened in the repository.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int # """ # Ordering options for pull requests returned from the connection. # """ # orderBy: IssueOrder # """ # A list of states to filter the pull requests by. # """ # states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this repository
  """
  url: URI!

  """
  A list of users watching the repository.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI

"""
A string containing HTML code.
"""
scalar HTML

"""
An ISO-8601 encoded date string.
"""
scalar Date

"""
An ISO-8601 encoded UTC date string.
"""
scalar DateTime

"""
An ISO-8601 encoded UTC date string with millisecond precision.
"""
scalar PreciseDateTime

"""
Social media profile associated with a user.
"""
type SocialAccount {
  """
  Name of the social media account as it appears on the profile.
  """
  displayName: String!

  # """
  # Software or company that hosts the social media account.
  # """
  # provider: SocialAccountProvider!

  """
  URL of the social media account.
  """
  url: URI!
}
"""
The connection type for SocialAccount.
"""
type SocialAccountConnection {
  """
  A list of edges.
  """
  edges: [SocialAccountEdge]

  """
  A list of nodes.
  """
  nodes: [SocialAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SocialAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SocialAccount
}

"""
The user's description of what they're currently doing.
"""
type UserStatus {
  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  An emoji summarizing the user's status.
  """
  emoji: String

  """
  The status emoji as HTML.
  """
  emojiHTML: HTML

  """
  If set, the status will not be shown after this date.
  """
  expiresAt: DateTime
  id: ID!

  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!

  """
  A brief message describing what the user is doing.
  """
  message: String

  # """
  # The organization whose members can see this status. If null, this status is publicly visible.
  # """
  # organization: Organization

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The user who has this status.
  """
  user: User!
}

"""
Represents a Git reference.
"""
type Ref implements Node {
  """
  The ref name.
  """
  name: String!

  """
  The ref's prefix, such as `refs/heads/` or `refs/tags/`.
  """
  prefix: String!

  """
  The repository the ref belongs to.
  """
  repository: Repository!

  # """
  # The object the ref points to. Returns null when object does not exist.
  # """
  # target: GitObject
}

"""
A repository pull request.
"""
type PullRequest {
  """
  The number of additions in this pull request.
  """
  additions: Int!

  """
  The actor who authored the comment.
  """
  author: Actor

  """
  Identifies the base Ref associated with the pull request.
  """
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  The repository associated with this pull request's base Ref.
  """
  baseRepository: Repository

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  `true` if the pull request is closed
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  A list of comments associated with the pull request.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int # """ # Ordering options for issue comments returned from the connection. # """ # orderBy: IssueCommentOrder
  ): IssueCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The number of deletions in this pull request.
  """
  deletions: Int!

  """
  Identifies the head Ref associated with the pull request.
  """
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  The repository associated with this pull request's head Ref.
  """
  headRepository: Repository

  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  The head and base repositories are different.
  """
  isCrossRepository: Boolean!

  """
  Identifies if the pull request is a draft.
  """
  isDraft: Boolean!

  """
  Is this pull request read by the viewer
  """
  isReadByViewer: Boolean

  # """
  # A list of labels associated with the object.
  # """
  # labels(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int

  #   """
  #   Ordering options for labels returned from the connection.
  #   """
  #   orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }
  # ): LabelConnection

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  # """
  # A list of latest reviews per user associated with the pull request.
  # """
  # latestOpinionatedReviews(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int

  #   """
  #   Only return reviews from user who have write access to the repository
  #   """
  #   writersOnly: Boolean = false
  # ): PullRequestReviewConnection

  # """
  # A list of latest reviews per user associated with the pull request that are not also pending review.
  # """
  # latestReviews(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int
  # ): PullRequestReviewConnection

  """
  `true` if the pull request is locked
  """
  locked: Boolean!

  """
  Indicates whether maintainers can modify the pull request.
  """
  maintainerCanModify: Boolean!

  # """
  # The commit that was created when this pull request was merged.
  # """
  # mergeCommit: Commit

  # """
  # The merge queue entry of the pull request in the base branch's merge queue
  # """
  # mergeQueueEntry: MergeQueueEntry

  # """
  # Detailed information about the current pull request merge state status.
  # """
  # mergeStateStatus: MergeStateStatus! @preview(toggledBy: "merge-info-preview")

  # """
  # Whether or not the pull request can be merged based on the existence of merge conflicts.
  # """
  # mergeable: MergeableState!

  """
  Whether or not the pull request was merged.
  """
  merged: Boolean!

  """
  The date and time that the pull request was merged.
  """
  mergedAt: DateTime

  """
  The actor who merged the pull request.
  """
  mergedBy: Actor

  # """
  # Identifies the milestone associated with the pull request.
  # """
  # milestone: Milestone

  """
  Identifies the pull request number.
  """
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  The permalink to the pull request.
  """
  permalink: URI!

  # """
  # The commit that GitHub automatically generated to test if this pull request
  # could be merged. This field will not return a value if the pull request is
  # merged, or if the test merge commit is still being generated. See the
  # `mergeable` field for more details on the mergeability of the pull request.
  # """
  # potentialMergeCommit: Commit

  # """
  # List of project cards associated with this pull request.
  # """
  # projectCards(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   A list of archived states to filter the cards by
  #   """
  #   archivedStates: [ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int
  # ): ProjectCardConnection!

  # """
  # List of project items associated with this pull request.
  # """
  # projectItems(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Include archived items.
  #   """
  #   includeArchived: Boolean = true

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int
  # ): ProjectV2ItemConnection!

  # """
  # Find a project by number.
  # """
  # projectV2(
  #   """
  #   The project number.
  #   """
  #   number: Int!
  # ): ProjectV2

  # """
  # A list of projects under the owner.
  # """
  # projectsV2(
  #   """
  #   Returns the elements in the list that come after the specified cursor.
  #   """
  #   after: String

  #   """
  #   Returns the elements in the list that come before the specified cursor.
  #   """
  #   before: String

  #   """
  #   Returns the first _n_ elements from the list.
  #   """
  #   first: Int

  #   """
  #   Returns the last _n_ elements from the list.
  #   """
  #   last: Int

  #   """
  #   How to order the returned projects.
  #   """
  #   orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }

  #   """
  #   A project to search for under the the owner.
  #   """
  #   query: String
  # ): ProjectV2Connection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this pull request.
  """
  resourcePath: URI!

  """
  The HTTP path for reverting this pull request.
  """
  revertResourcePath: URI!

  """
  The HTTP URL for reverting this pull request.
  """
  revertUrl: URI!

  """
  Identifies the pull request title.
  """
  title: String!

  """
  Identifies the pull request title rendered to HTML.
  """
  titleHTML: HTML!

  """
  Returns a count of how many comments this pull request has received.
  """
  totalCommentsCount: Int

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this pull request.
  """
  url: URI!

  """
  Whether or not the viewer can apply suggestion.
  """
  viewerCanApplySuggestion: Boolean!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the viewer can restore the deleted head ref.
  """
  viewerCanDeleteHeadRef: Boolean!

  """
  Whether or not the viewer can disable auto-merge
  """
  viewerCanDisableAutoMerge: Boolean!

  """
  Can the viewer edit files within this pull request.
  """
  viewerCanEditFiles: Boolean!

  """
  Whether or not the viewer can enable auto-merge
  """
  viewerCanEnableAutoMerge: Boolean!

  """
  Indicates whether the viewer can bypass branch protections and merge the pull request immediately
  """
  viewerCanMergeAsAdmin: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
  If the head ref is up to date or unable to be updated by this user, this will return false.
  """
  viewerCanUpdateBranch: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for PullRequest.
"""
type PullRequestConnection {
  """
  A list of edges.
  """
  edges: [PullRequestEdge]

  """
  A list of nodes.
  """
  nodes: [PullRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PullRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PullRequest
}

"""
The connection type for User.
"""
type StargazerConnection {
  """
  A list of edges.
  """
  edges: [StargazerEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user that's starred a repository.
"""
type StargazerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: User!

  """
  Identifies when the item was starred.
  """
  starredAt: DateTime!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a user.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
Represents a comment on an Issue.
"""
type IssueComment {
  """
  The actor who authored the comment.
  """
  author: Actor

  # """
  # Author's association with the subject of the comment.
  # """
  # authorAssociation: CommentAuthorAssociation!

  """
  The body as Markdown.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The body rendered to text.
  """
  bodyText: String!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The actor who edited the comment.
  """
  editor: Actor

  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Returns whether or not a comment has been minimized.
  """
  isMinimized: Boolean!

  """
  Identifies the issue associated with the comment.
  """
  issue: Issue!

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  Returns why the comment was minimized. One of `abuse`, `off-topic`,
  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
  formatting of these values differs from the inputs to the `MinimizeComment` mutation.
  """
  minimizedReason: String

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: PullRequest

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this issue comment
  """
  resourcePath: URI!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this issue comment
  """
  url: URI!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Check if the current viewer can minimize this object.
  """
  viewerCanMinimize: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

"""
The connection type for IssueComment.
"""
type IssueCommentConnection {
  """
  A list of edges.
  """
  edges: [IssueCommentEdge]

  """
  A list of nodes.
  """
  nodes: [IssueComment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type IssueCommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IssueComment
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A list of repositories owned by the subject.
"""
type RepositoryConnection {
  """
  A list of edges.
  """
  edges: [RepositoryEdge]

  """
  A list of nodes.
  """
  nodes: [Repository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total size in kilobytes of all repositories in the connection.
  """
  totalDiskUsage: Int!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

"""
The connection type for Repository.
"""
type StarredRepositoryConnection {
  """
  A list of edges.
  """
  edges: [StarredRepositoryEdge]

  """
  Is the list of stars for this user truncated? This is true for users that have many stars.
  """
  isOverLimit: Boolean!

  """
  A list of nodes.
  """
  nodes: [Repository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Represents a starred repository.
"""
type StarredRepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  node: Repository!

  """
  Identifies when the item was starred.
  """
  starredAt: DateTime!
}

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue {
  """
  Identifies the body of the issue.
  """
  body: String!

  """
  The body rendered to HTML.
  """
  bodyHTML: HTML!

  """
  The http path for this issue body
  """
  bodyResourcePath: URI!

  """
  Identifies the body of the issue rendered to text.
  """
  bodyText: String!

  """
  The http URL for this issue body
  """
  bodyUrl: URI!

  """
  Indicates if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """
  Identifies the date and time when the object was closed.
  """
  closedAt: DateTime

  """
  A list of comments associated with the Issue.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueCommentConnection!

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Check if this comment was created via an email reply.
  """
  createdViaEmail: Boolean!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Indicates whether or not this issue is currently pinned to the repository issues list
  """
  isPinned: Boolean

  """
  Is this issue read by the viewer
  """
  isReadByViewer: Boolean

  """
  The moment the editor made the last edit
  """
  lastEditedAt: DateTime

  """
  `true` if the object is locked
  """
  locked: Boolean!

  """
  Identifies the issue number.
  """
  number: Int!

  """
  A list of Users that are participating in the Issue conversation.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Identifies when the comment was published at.
  """
  publishedAt: DateTime

  """
  The repository associated with this node.
  """
  repository: Repository!

  """
  The HTTP path for this issue
  """
  resourcePath: URI!

  """
  Identifies the issue title.
  """
  title: String!

  """
  Identifies the issue title rendered to HTML.
  """
  titleHTML: String!

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this issue
  """
  url: URI!

  """
  Indicates if the object can be closed by the viewer.
  """
  viewerCanClose: Boolean!

  """
  Check if the current viewer can delete this object.
  """
  viewerCanDelete: Boolean!

  """
  Can user react to this subject
  """
  viewerCanReact: Boolean!

  """
  Indicates if the object can be reopened by the viewer.
  """
  viewerCanReopen: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Check if the current viewer can update this object.
  """
  viewerCanUpdate: Boolean!

  """
  Did the viewer author this comment.
  """
  viewerDidAuthor: Boolean!
}

# -------------------------------------------------------
# THIS IS NOT A REAL TYPE IN THE SCHEMA
# However, we currently don't support interfaces.
# But, we can pretend this is its own type for now.
# -------------------------------------------------------
type Actor {
  """
  A URL pointing to the actor's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!

  """
  The username of the actor.
  """
  login: String!

  """
  The HTTP path for this actor.
  """
  resourcePath: URI!

  """
  The HTTP URL for this actor.
  """
  url: URI!
}

"""
Represents an owner of a Repository.
"""
type RepositoryOwner {
  """
  A URL pointing to the owner's public avatar.
  """
  avatarUrl(
    """
    The size of the resulting square image.
    """
    size: Int
  ): URI!
  id: ID!

  """
  The username used to login.
  """
  login: String!

  """
  A list of repositories that the user owns.
  """
  repositories(
    # """
    # Array of viewer's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # current viewer owns.
    # """
    # affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int # """ # Ordering options for repositories returned from the connection # """ # orderBy: RepositoryOrder # """ # Array of owner's affiliation options for repositories returned from the # connection. For example, OWNER will include only repositories that the # organization or user being viewed owns. # """ # ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]
  ): # """
  # If non-null, filters repositories according to privacy
  # """
  # privacy: RepositoryPrivacy
  RepositoryConnection!

  """
  Find Repository.
  """
  repository(
    """
    Follow repository renames. If disabled, a repository referenced by its old name will return an error.
    """
    followRenames: Boolean = true

    """
    Name of Repository to find.
    """
    name: String!
  ): Repository

  """
  The HTTP URL for the owner.
  """
  resourcePath: URI!

  """
  The HTTP URL for the owner.
  """
  url: URI!
}

interface Node {
  id: ID!
}
